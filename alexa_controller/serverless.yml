service: alexa-chess

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  deploymentBucket: ${self:custom.deployment_bucket}
  profile: alexa-chess-deploy
  
  
tasks:
  - name: Import environment variables
    include_vars:
      file: ./env.yml
      name: envs
      
custom:
  pythonRequirements:
    dockerizePip: non-linux
  account_id: ${file(./customjs/custom-account-id.js):getAccountId}
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  deployment_bucket: ${self:custom.account_id}-${self:service}-${self:provider.stage}
  session_table: ${self:custom.account_id}-${self:service}-${self:provider.stage}-session
  board_images_bucket: ${self:custom.account_id}-${self:service}-${self:provider.stage}-board-images
  

functions:
  alexa_chess_handler:
    handler: src/alexa_chess_handler.lambda_handler
    description: Controls Alexa responses for Alexa Chess
    memorySize: 128
    timeout: 15
    environment:
      ENV: 'environment'
      BOARD_IMAGES_BUCKET: ${self:custom.board_images_bucket}
    iamRoleStatementsName: alexa-chess-handler-role-${self:custom.stage}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - lambda:GetLayerVersion
          - lambda:PublishLayerVersion
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "logs:CreateLogGroup"
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
        Resource: "arn:aws:logs:*:*:*"
      - Effect: "Allow"
        Action:
          - "s3:PutObject"
          - "s3:GetObject"
          - "s3:GetObjectVersion"
          - "s3:ListBucket"
        Resource: !Join [ "", [ "arn:aws:s3:::", "${self:custom.board_images_bucket}", "/*" ] ]
    events:
      - alexaSkill: {{ envs.alexa_endpoint.${self:custom.stage} }}
#      - alexaSkill: amzn1.ask.skill.d79d3e65-2090-45c3-938a-0c6c7e26071f
          

     
resources:
  Description: CloudFormation template generated by serverless framework
  Resources:
  
    # BUCKET TO STORE GENERATED BOARD IMAGES TO SHOW IN ALEXA SHOW
    # LIFECYCLE POLICY DELETES AFTER ONE DAY, SINCE THE IMAGE IS JUST TEMPORARY AND ISNT USED AGAIN
    BoardImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.board_images_bucket}
        LifecycleConfiguration:
            Rules:
            - Id: DeleteContentAfter1Day
              Prefix: ''
              Status: 'Enabled'
              ExpirationInDays: '1'
  
  
      
plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters
  - serverless-plugin-create-deployment-bucket